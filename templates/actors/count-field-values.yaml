
# Inline python actor to create distinct value counts all DwC terms recommended to follow
# controlled vocabularies.
- id: <%= actor.name %>
  type: PythonActor
  properties:
    # Inline python code to run.
    code: |
        # The function to run when an on_data message is received. Accepts a dictionary
        # of options.
        from kurator_dwca.dwca_utils import read_header
        from kurator_dwca.dwca_utils import clean_header
        from kurator_dwca.dwca_utils import csv_file_encoding
        from kurator_dwca.dwca_terms import controlledtermlist
        from kurator_dwca.term_value_count_reporter import term_value_count_reporter
        def on_data(options):
            actor = 'CountFieldValues'
            print '### Started %s ###' % actor
            for key, value in options.iteritems():
                print '%s: %s' % (key, value)

            # Get the format for the output files, with 'csv' as the default
            try:
                format = options['format']
            except:
                format = 'csv'

            # Figure out the input file encoding first. It will makes things much faster
            # to know it in advance and pass that information to various steps.
            #encoding = csv_file_encoding(options['inputfile'])
            encoding = 'utf-8'
            header = read_header(options['inputfile'], encoding=encoding)

            # Create a cleaned list of fields from the input file
            cleanheader = clean_header(header)

            # Turn the input fieldlist into a cleaned list
            try:
                fieldlist = options['fieldlist']
            except:
                fieldlist = 'country'
            termsofinterest = fieldlist.split('|')
            cleantermlist = clean_header(termsofinterest)

            # Get a list of fields from those of interest that actually exist in the
            # inputfile
            termlist = []
            for term in cleantermlist:
                if term in cleanheader:
                    termlist.append(term)

            # Prepare the output dictionary
            outputoptions = {}
            outputoptions['success'] = True
            outputoptions['message'] = None
            outputoptions['workspace'] = options['workspace']
            outputoptions['artifacts'] = {}

            # Cycle through all of the fields of interest in the inputfile
            for term in termlist:
                filename = 'count_'+term.lower()+'.'+format

                # Prepare the options dictionary for the term_value_count_reporter
                counteroptions = {}
                counteroptions['workspace'] = options['workspace']
                counteroptions['inputfile'] = options['inputfile']
                counteroptions['outputfile'] = filename
                counteroptions['format'] = format
                counteroptions['termlist'] = [term]
                counteroptions['encoding'] = encoding

                # Create the reports
                results = term_value_count_reporter(counteroptions)
                if results['success'] == False:
                    outputoptions['success'] = False
                    outputoptions['message'] = results['message']
                    return outputoptions
                else:
                    artifact_key = '%s_count_file' % term
                    outputoptions['artifacts'][artifact_key] = results['outputfile']
            return outputoptions
    # A list of parameters to get from the options dictionary passed from an
    # upstream actor.
    inputs:
      <% _.each(actor.inputs, function(input) { %>
      <%= input.from %>: <%= input.to %>
      <% }); %>
    # The "upstream" actor from which to receive a message.
    listensTo:
      - !ref <%= actor.listensTo %>
